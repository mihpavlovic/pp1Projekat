package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESPACE, CONST ;
terminal String IDENT;
terminal Integer NUMBER;
terminal BOOL;
terminal String CHAR;

terminal DOUBLECOLON, READ, NEW, PLUS, MUL, COMMA, SEMI, DIV, MINUS, RPAREN, ASSIGN, LPAREN, LBRACKET, MOD, RBRACKET;
terminal INC, PRINT, VOID, DEC;
terminal GREATER,LESS,GREATEROREQUAL,LESSOREQUAL,EQUAL,DIFFERENT,AND,OR;


nonterminal Program, NamespList, Declarations, Namesp, VarDecl, ConstDecl, MethodDeclList, WhichConst, MoreConstDecls, MoreVarDecls;
nonterminal FormPars, StatementList, Statement, DesignatorStatement, VarDeclInFunc , AndConst, DesigNmsp, DesigBracket;
nonterminal Addop, Relop, Mulop;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodDeclName, MethodDecl, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor;

Program ::= (Program)  PROG ProgName:p NamespList Declarations LBRACE MethodDeclList  RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NamespList ::= (NamespaceList) NamespList Namesp 
				|
				(NoNamespaceList)/*epsilon*/
				;

Namesp ::= (Namesp) NAMESPACE IDENT LBRACE Declarations LBRACE RBRACE RBRACE;

Declarations ::=(ConstDeclarations) Declarations ConstDecl
				|
				(VarDeclarations) Declarations VarDecl
				|
				(NoDeclarations) /*epsilon smena*/
				;

ConstDecl ::= (ConstDecl) CONST Type:constType IDENT:constName ASSIGN WhichConst MoreConstDecls SEMI ;

VarDecl ::= (VarDeclArray) Type:arrayType IDENT:arrayName LBRACKET RBRACKET MoreVarDecls SEMI
			|
			(VarDeclNoArray) Type:varType IDENT:varName MoreVarDecls SEMI
			|
			(ErrorStmtVar) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;

Type ::= (Type) IDENT:typeName;

WhichConst ::= (ConstNum) NUMBER:numValue
				|
				(ConstChar) CHAR:charValue
				|
				(ConstBool) BOOL:boolValue
				;

MoreConstDecls ::= (MoreConstDeclarations) MoreConstDecls COMMA IDENT ASSIGN WhichConst
					|
					(NoMoreConstDeclarations) /*epsilon smena*/
					;

MethodDeclList::= (MethodDeclList) MethodDecl ; /*uradjeno da moze samo jedna da se deklarise, odnosno samo main*/

MoreVarDecls ::= (MoreVarDeclarationsArray) MoreVarDecls COMMA IDENT LBRACKET RBRACKET
				|
				(MoreVarDeclarations) MoreVarDecls COMMA IDENT
				|
				(NoMoreVarDeclarations) /*epsilon smena*/
				 ;
				 
/*MethodDecl ::= (MethodDeclType) Type IDENT LPAREN FormPars RPAREN VarDeclInFunc LBRACE StatementList RBRACE
				|
				(MethodDeclVoid) VOID IDENT LPAREN FormPars RPAREN VarDeclInFunc LBRACE StatementList RBRACE;
*/

MethodDecl ::= (MethodDecl) MethodDeclName LPAREN FormPars RPAREN VarDeclInFunc LBRACE StatementList RBRACE;



MethodDeclName ::= (MethodDeclNameType) Type:methType IDENT:methName
				|
				(MethodDeclNameVoid) VOID IDENT:methName
				;

FormPars ::= (FormPars) /*epsilon smena*/;

VarDeclInFunc ::= (VarDeclarationsInFuncArray) VarDeclInFunc Type IDENT LBRACKET RBRACKET SEMI
				|
				(VarDeclarationsInFunc) VarDeclInFunc Type IDENT MoreVarDecls SEMI
				|
				(NoVarDeclarationsInFunc)/*epsilon smena*/
				;

StatementList ::= (StmtList) StatementList Statement
				|
				 (NoStmtList)/*epsilon smena*/
				;

Statement ::= (StatementDesignatorStatement) DesignatorStatement SEMI 
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMI 
			| 
			(StatementPrint) PRINT LPAREN Expr AndConst RPAREN SEMI
			|
			(ErrorStmt) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;

AndConst ::= (AndConstPrint) COMMA NUMBER
			|
			(NoAndConstPrint) /*epsilon smena*/
			;

DesignatorStatement ::= (DesignatorStatementAssign) Designator ASSIGN Expr
						|
						(DesignatorStatementInc) Designator INC
						|
						(DesignatorStatementDec) Designator DEC
						;

Designator ::= (DesigntrNmspArray) IDENT DOUBLECOLON IDENT LBRACKET Expr RBRACKET
				|
				(Designtr) IDENT:name
				|
				(DesigntrArray) IDENT LBRACKET Expr RBRACKET
				|
				(DesigntrNmsp) IDENT DOUBLECOLON IDENT
				;




Expr ::= (ExprMinus) MINUS Term
		|
		(ExprNoMinus) Term
		|
		(ExprAddopTerm) Expr Addop Term
		;
		
Term ::= (TermMulopFactor) Term Mulop Factor 
		|
		(FactorNoTerm)Factor
		;





			
Factor ::= (FactorNum) NUMBER:num
			|
			(FactorChar) CHAR:ch
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
			(FactorBool) BOOL:bl
			|
			(FactorDesignator) Designator
			|
			(FactorNew) NEW Type LBRACKET Expr RBRACKET
			;






Addop ::= (AddopMinus) MINUS:m
		|
		(AddopPlus) PLUS:p
		;

Mulop ::= (MulopMul) MUL:ml
		| 
		(MulopDiv) DIV:d
		|
		(MulopMod) MOD:md
		;
		


Relop ::= (RelopGr) GREATER 
		| 
		(RelopLe) LESS 
		| 
		(RelopGrOrEq) GREATEROREQUAL
		| 
		(RelopLeOrEq)LESSOREQUAL 
		| 
		(RelopEq) EQUAL
		| 
		(RelopDiff) DIFFERENT
		;





