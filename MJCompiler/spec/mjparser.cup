package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESPACE, CONST ;
terminal IDENT;
terminal NUMBER;
terminal BOOL;
terminal CHAR;

terminal DOUBLECOLON, READ, NEW, PLUS, MUL, COMMA, SEMI, DIV, MINUS, RPAREN, ASSIGN, LPAREN, LBRACKET, MOD, RBRACKET;
terminal INC, PRINT, VOID, DEC;
terminal GREATER,LESS,GREATEROREQUAL,LESSOREQUAL,EQUAL,DIFFERENT,AND,OR;


nonterminal Program, NamespList, Declarations, Namesp, VarDecl, ConstDecl, MethodDeclList, Type, WhichConst, MoreConstDecls, MoreVarDecls;
nonterminal MethodDecl, FormPars, StatementList, Statement, DesignatorStatement, VarDeclInFunc, Designator, Expr, AndConst, DesigNmsp, DesigBracket;


Program ::=  PROG IDENT NamespList Declarations LBRACE MethodDeclList  RBRACE;

NamespList ::= NamespList Namesp 
				|
				/*epsilon*/
				;

Namesp ::= NAMESPACE IDENT LBRACE Declarations LBRACE RBRACE RBRACE;

Declarations ::= Declarations ConstDecl
				|
				Declarations VarDecl
				|
				/*epsilon smena*/
				;

ConstDecl ::= CONST Type IDENT ASSIGN WhichConst MoreConstDecls SEMI ;

VarDecl ::= Type IDENT LBRACKET RBRACKET MoreVarDecls SEMI
			|
			Type IDENT MoreVarDecls SEMI
			;

Type ::= IDENT;

WhichConst ::= NUMBER
				|
				CHAR
				|
				BOOL
				;

MoreConstDecls ::= MoreConstDecls COMMA IDENT ASSIGN WhichConst
					|
					/*epsilon smena*/
					;

MethodDeclList::= MethodDecl ; /*uradjeno da moze samo jedna da se deklarise, odnosno samo main*/

MoreVarDecls ::= MoreVarDecls COMMA IDENT LBRACKET RBRACKET
				|
				MoreVarDecls COMMA IDENT
				|
				/*epsilon smena*/
				 ;
				 
MethodDecl ::= Type IDENT LPAREN FormPars RPAREN VarDeclInFunc LBRACE StatementList RBRACE;

FormPars ::= /*epsilon smena*/;

VarDeclInFunc ::= VarDeclInFunc Type IDENT LBRACKET RBRACKET SEMI
				|
				VarDeclInFunc Type IDENT MoreVarDecls SEMI
				|
				/*epsilon smena*/
				;

StatementList ::= StatementList Statement
				|
				/*epsilon smena*/
				;

Statement ::= DesignatorStatement SEMI 
			|
			READ LPAREN Designator RPAREN SEMI 
			| 
			PRINT LPAREN Expr AndConst RPAREN SEMI
			;

AndConst ::= COMMA NUMBER
			|
			/*epsilon smena*/
			;

DesignatorStatement ::= Designator ASSIGN Expr
						|
						Designator INC
						|
						Designator DEC
						;

Designator ::= IDENT DOUBLECOLON IDENT LBRACKET Expr RBRACKET
				|
				IDENT
				|
				IDENT LBRACKET Expr RBRACKET
				|
				IDENT DOUBLECOLON IDENT
				;

Expr ::= NUMBER;




