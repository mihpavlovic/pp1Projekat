package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESPACE, CONST ;
terminal IDENT;
terminal NUMBER;
terminal BOOL;
terminal CHAR;

terminal DOUBLECOLON, READ, NEW, PLUS, MUL, COMMA, SEMI, DIV, MINUS, RPAREN, ASSIGN, LPAREN, LBRACKET, MOD, RBRACKET;
terminal INC, PRINT, VOID, DEC;
terminal GREATER,LESS,GREATEROREQUAL,LESSOREQUAL,EQUAL,DIFFERENT,AND,OR;


nonterminal Program Program;
nonterminal NamespList NamespList;
nonterminal Declarations Declarations;
nonterminal Namesp Namesp;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal Type Type;
nonterminal WhichConst WhichConst;
nonterminal MoreConstDecls MoreConstDecls;
nonterminal MoreVarDecls MoreVarDecls;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal VarDeclInFunc VarDeclInFunc;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal AndConst AndConst;
nonterminal DesigNmsp DesigNmsp;
nonterminal DesigBracket DesigBracket;
nonterminal Term Term;
nonterminal AddopTerm AddopTerm;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Factor Factor;
nonterminal MulopFactor MulopFactor;


Program ::=  PROG IDENT NamespList:N1 Declarations:D2 LBRACE MethodDeclList:M3  RBRACE {: RESULT=new ProgramDerived1(N1, D2, M3); RESULT.setLine(N1left); :};

NamespList ::= NamespList:N1 Namesp:N2 {: RESULT=new NamespListDerived1(N1, N2); RESULT.setLine(N1left); :} 
				| {: RESULT=new NamespListDerived2(); :}
				/*epsilon*/
				;

Namesp ::= NAMESPACE IDENT LBRACE Declarations:D1 LBRACE RBRACE RBRACE {: RESULT=new NamespDerived1(D1); RESULT.setLine(D1left); :};

Declarations ::= Declarations:D1 ConstDecl:C2 {: RESULT=new DeclarationsDerived1(D1, C2); RESULT.setLine(D1left); :}
				|
				Declarations:D1 VarDecl:V2 {: RESULT=new DeclarationsDerived2(D1, V2); RESULT.setLine(D1left); :}
				| {: RESULT=new DeclarationsDerived3(); :}
				/*epsilon smena*/
				;

ConstDecl ::= CONST Type:T1 IDENT ASSIGN WhichConst:W2 MoreConstDecls:M3 SEMI {: RESULT=new ConstDeclDerived1(T1, W2, M3); RESULT.setLine(T1left); :} ;

VarDecl ::= Type:T1 IDENT LBRACKET RBRACKET MoreVarDecls:M2 SEMI {: RESULT=new VarDeclDerived1(T1, M2); RESULT.setLine(T1left); :}
			|
			Type:T1 IDENT MoreVarDecls:M2 SEMI {: RESULT=new VarDeclDerived2(T1, M2); RESULT.setLine(T1left); :}
			;

Type ::= IDENT {: RESULT=new TypeDerived1(); :};

WhichConst ::= NUMBER {: RESULT=new WhichConstDerived1(); :}
				|
				CHAR {: RESULT=new WhichConstDerived2(); :}
				|
				BOOL {: RESULT=new WhichConstDerived3(); :}
				;

MoreConstDecls ::= MoreConstDecls:M1 COMMA IDENT ASSIGN WhichConst:W2 {: RESULT=new MoreConstDeclsDerived1(M1, W2); RESULT.setLine(M1left); :}
					| {: RESULT=new MoreConstDeclsDerived2(); :}
					/*epsilon smena*/
					;

MethodDeclList::= MethodDecl:M1 {: RESULT=new MethodDeclListDerived1(M1); RESULT.setLine(M1left); :} ; /*uradjeno da moze samo jedna da se deklarise, odnosno samo main*/

MoreVarDecls ::= MoreVarDecls:M1 COMMA IDENT LBRACKET RBRACKET {: RESULT=new MoreVarDeclsDerived1(M1); RESULT.setLine(M1left); :}
				|
				MoreVarDecls:M1 COMMA IDENT {: RESULT=new MoreVarDeclsDerived2(M1); RESULT.setLine(M1left); :}
				| {: RESULT=new MoreVarDeclsDerived3(); :}
				/*epsilon smena*/
				 ;
				 
MethodDecl ::= Type:T1 IDENT LPAREN FormPars:F2 RPAREN VarDeclInFunc:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclDerived1(T1, F2, V3, S4); RESULT.setLine(T1left); :}
				|
				VOID IDENT LPAREN FormPars:F1 RPAREN VarDeclInFunc:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclDerived2(F1, V2, S3); RESULT.setLine(F1left); :};

FormPars ::= {: RESULT=new FormParsDerived1(); :} /*epsilon smena*/;

VarDeclInFunc ::= VarDeclInFunc:V1 Type:T2 IDENT LBRACKET RBRACKET SEMI {: RESULT=new VarDeclInFuncDerived1(V1, T2); RESULT.setLine(V1left); :}
				|
				VarDeclInFunc:V1 Type:T2 IDENT MoreVarDecls:M3 SEMI {: RESULT=new VarDeclInFuncDerived2(V1, T2, M3); RESULT.setLine(V1left); :}
				| {: RESULT=new VarDeclInFuncDerived3(); :}
				/*epsilon smena*/
				;

StatementList ::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
				| {: RESULT=new StatementListDerived2(); :}
				/*epsilon smena*/
				;

Statement ::= DesignatorStatement:D1 SEMI {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :} 
			|
			READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementDerived2(D1); RESULT.setLine(D1left); :} 
			| 
			PRINT LPAREN Expr:E1 AndConst:A2 RPAREN SEMI {: RESULT=new StatementDerived3(E1, A2); RESULT.setLine(E1left); :}
			;

AndConst ::= COMMA NUMBER {: RESULT=new AndConstDerived1(); :}
			| {: RESULT=new AndConstDerived2(); :}
			/*epsilon smena*/
			;

DesignatorStatement ::= Designator:D1 ASSIGN Expr:E2 {: RESULT=new DesignatorStatementDerived1(D1, E2); RESULT.setLine(D1left); :}
						|
						Designator:D1 INC {: RESULT=new DesignatorStatementDerived2(D1); RESULT.setLine(D1left); :}
						|
						Designator:D1 DEC {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
						;

Designator ::= IDENT DOUBLECOLON IDENT LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorDerived1(E1); RESULT.setLine(E1left); :}
				|
				IDENT {: RESULT=new DesignatorDerived2(); :}
				|
				IDENT LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorDerived3(E1); RESULT.setLine(E1left); :}
				|
				IDENT DOUBLECOLON IDENT {: RESULT=new DesignatorDerived4(); :}
				;

Expr ::= MINUS Term:T1 AddopTerm:A2 {: RESULT=new ExprDerived1(T1, A2); RESULT.setLine(T1left); :}
		|
		Term:T1 AddopTerm:A2 {: RESULT=new ExprDerived2(T1, A2); RESULT.setLine(T1left); :}
		;

Term ::= Factor:F1 MulopFactor:M2 {: RESULT=new TermDerived1(F1, M2); RESULT.setLine(F1left); :};

AddopTerm ::= AddopTerm:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermDerived1(A1, A2, T3); RESULT.setLine(A1left); :}
				| {: RESULT=new AddopTermDerived2(); :} 
				/*epsilon smena*/
				;
				
Factor ::= NUMBER {: RESULT=new FactorDerived1(); :}
			|
			CHAR {: RESULT=new FactorDerived2(); :}
			|
			LPAREN Expr:E1 RPAREN {: RESULT=new FactorDerived3(E1); RESULT.setLine(E1left); :}
			|
			BOOL {: RESULT=new FactorDerived4(); :}
			|
			Designator:D1 {: RESULT=new FactorDerived5(D1); RESULT.setLine(D1left); :}
			|
			NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorDerived6(T1, E2); RESULT.setLine(T1left); :}
			;


MulopFactor ::= MulopFactor:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorDerived1(M1, M2, F3); RESULT.setLine(M1left); :}
				| {: RESULT=new MulopFactorDerived2(); :}
				/*epsilon smena*/
				;



Addop ::= MINUS {: RESULT=new AddopDerived1(); :}
		|
		PLUS {: RESULT=new AddopDerived2(); :}
		;

Mulop ::= MUL {: RESULT=new MulopDerived1(); :}
		| 
		DIV {: RESULT=new MulopDerived2(); :}
		|
		MOD {: RESULT=new MulopDerived3(); :}
		;
		


Relop ::= GREATER {: RESULT=new RelopDerived1(); :} 
		| 
		LESS {: RESULT=new RelopDerived2(); :} 
		| 
		GREATEROREQUAL {: RESULT=new RelopDerived3(); :}
		| 
		LESSOREQUAL {: RESULT=new RelopDerived4(); :} 
		| 
		EQUAL {: RESULT=new RelopDerived5(); :}
		| 
		DIFFERENT {: RESULT=new RelopDerived6(); :}
		;





