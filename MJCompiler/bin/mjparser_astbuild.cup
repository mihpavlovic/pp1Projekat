package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, NAMESPACE, CONST ;
terminal IDENT;
terminal NUMBER;
terminal BOOL;
terminal CHAR;

terminal DOUBLECOLON, READ, NEW, PLUS, MUL, COMMA, SEMI, DIV, MINUS, RPAREN, EQUAL, LPAREN, LBRACKET, MOD, RBRACKET;
terminal INC, PRINT, VOID, DEC;

nonterminal Program Program;
nonterminal NamespList NamespList;
nonterminal Declarations Declarations;
nonterminal Namesp Namesp;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal Type Type;
nonterminal WhichConst WhichConst;
nonterminal MoreConstDecls MoreConstDecls;


Program ::=  PROG IDENT NamespList:N1 Declarations:D2 LBRACE MethodDeclList:M3  RBRACE {: RESULT=new ProgramDerived1(N1, D2, M3); RESULT.setLine(N1left); :};

NamespList ::= NamespList:N1 Namesp:N2 {: RESULT=new NamespListDerived1(N1, N2); RESULT.setLine(N1left); :} 
				| {: RESULT=new NamespListDerived2(); :}
				/*epsilon*/
				;

Namesp ::= NAMESPACE IDENT LBRACE Declarations:D1 LBRACE RBRACE RBRACE {: RESULT=new NamespDerived1(D1); RESULT.setLine(D1left); :};

Declarations ::= Declarations:D1 ConstDecl:C2 {: RESULT=new DeclarationsDerived1(D1, C2); RESULT.setLine(D1left); :}
				|
				Declarations:D1 VarDecl:V2 {: RESULT=new DeclarationsDerived2(D1, V2); RESULT.setLine(D1left); :}
				| {: RESULT=new DeclarationsDerived3(); :}
				/*epsilon smena*/
				;

ConstDecl ::= CONST Type:T1 IDENT EQUAL WhichConst:W2 MoreConstDecls:M3 SEMI {: RESULT=new ConstDeclDerived1(T1, W2, M3); RESULT.setLine(T1left); :} ;

VarDecl ::= IDENT {: RESULT=new VarDeclDerived1(); :};

Type ::= IDENT {: RESULT=new TypeDerived1(); :};

WhichConst ::= NUMBER {: RESULT=new WhichConstDerived1(); :}
				|
				CHAR {: RESULT=new WhichConstDerived2(); :}
				|
				BOOL {: RESULT=new WhichConstDerived3(); :}
				;

MoreConstDecls ::= COMMA IDENT EQUAL WhichConst:W1 {: RESULT=new MoreConstDeclsDerived1(W1); RESULT.setLine(W1left); :}
					| {: RESULT=new MoreConstDeclsDerived2(); :}
					/*epsilon smena*/
					;

MethodDeclList::= {: RESULT=new MethodDeclListDerived1(); :};









